{"version":3,"file":"index-65e36f45.js","sources":["../../src/components/ui/Heading/Heading3.tsx","../../src/components/ui/Heading/Heading6.tsx","../../src/features/drivers/components/DriverStats/DriverStats.tsx","../../src/features/parts/components/PartStats/PartStats.tsx","../../src/features/calculators/components/BestAssets/BestPartsGrid.tsx","../../src/components/Asset/BestAssetCard.tsx","../../src/features/calculators/components/BestAssets/BestParts.tsx","../../src/features/calculators/components/BestAssets/BestDrivers.tsx","../../src/features/calculators/components/TeamStats/TeamStatCard.tsx","../../src/features/calculators/components/TeamStats/TeamScore.tsx","../../src/features/calculators/components/TeamStats/TeamPartsStats.tsx","../../src/features/calculators/hooks/useBestDrivers.ts","../../src/features/calculators/hooks/useBestPart.ts","../../src/features/calculators/hooks/useBestPartsStatsSum.ts","../../src/features/calculators/hooks/useBestParts.ts","../../src/features/calculators/hooks/useTeamScore.ts","../../src/features/calculators/components/BestTeam/BestTeam.tsx","../../src/features/calculators/hooks/useBestDriversOnceUpgraded.ts","../../src/features/calculators/hooks/useBestPartOnceUpgraded.ts","../../src/features/calculators/hooks/useBestPartsOnceUpgraded.ts","../../src/features/calculators/components/BestTeam/BestTeamOnceUpgraded.tsx","../../src/features/calculators/routes/pages/CalculatorPage.tsx"],"sourcesContent":["import { twMerge } from 'tailwind-merge';\n\ninterface Props {\n  className?: string;\n  children: string | number;\n}\n\nconst Heading3 = (props: Props) => {\n  const { children, className } = props;\n\n  return <h3 className={twMerge('text-3xl font-bold dark:text-white mb-3', className)}>{children as string}</h3>;\n};\n\nexport default Heading3;\n","import { twMerge } from 'tailwind-merge';\n\ninterface Props {\n  className?: string;\n  children: string | string[] | number;\n}\n\nconst Heading6 = (props: Props) => {\n  const { children, className } = props;\n\n  return <h6 className={twMerge('text-lg font-bold dark:text-white mb-3', className)}>{children as string}</h6>;\n};\n\nexport default Heading6;\n","import { Hr } from '../../../../components/ui';\nimport { useTranslation } from 'react-i18next';\nimport DefinitionItem from '@/components/DefinitionItem';\nimport type { DriverStat } from '@/features/drivers';\n\ninterface Props {\n  stat: DriverStat;\n}\n\nconst DriverStats = (props: Props) => {\n  const { stat } = props;\n\n  const { t } = useTranslation(['drivers']);\n\n  return (\n    <div>\n      <div className='flex flex-row gap-2 divide-x justify-between divide-gray-200 dark:divide-gray-700'>\n        <div className='flex w-1/3 justify-center'>\n          <DefinitionItem\n            className='text-center'\n            term={t('drivers:overtaking')}\n          >\n            {stat.overtaking}\n          </DefinitionItem>\n        </div>\n        <div className='flex w-1/3 justify-center pl-2'>\n          <DefinitionItem\n            className='text-center'\n            term={t('drivers:defending')}\n          >\n            {stat.defending}\n          </DefinitionItem>\n        </div>\n        <div className='flex w-1/3 justify-center pl-2'>\n          <DefinitionItem\n            className='text-center'\n            term={t('drivers:qualifying')}\n          >\n            {stat.qualifying}\n          </DefinitionItem>\n        </div>\n      </div>\n\n      <Hr />\n\n      <div className='flex flex-row gap-2 divide-x justify-between divide-gray-200 dark:divide-gray-700'>\n        <div className='flex w-1/2 justify-center'>\n          <DefinitionItem\n            className='text-center'\n            term={t('drivers:raceStart')}\n          >\n            {stat.raceStart}\n          </DefinitionItem>\n        </div>\n        <div className='flex w-1/2 justify-center pl-2'>\n          <DefinitionItem\n            className='text-center'\n            term={t('drivers:tireManagement')}\n          >\n            {stat.tireManagement}\n          </DefinitionItem>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DriverStats;\n","import { Hr } from '../../../../components/ui';\nimport { useTranslation } from 'react-i18next';\nimport DefinitionItem from '@/components/DefinitionItem';\nimport type { PartStat } from '@/features/parts';\n\ninterface Props {\n  stat: PartStat;\n}\n\nconst PartStats = (props: Props) => {\n  const { stat } = props;\n\n  const { t } = useTranslation(['parts']);\n\n  return (\n    <div>\n      <div className='flex flex-row gap-2 divide-x justify-between divide-gray-200 dark:divide-gray-700'>\n        <div className='flex w-1/3 justify-center'>\n          <DefinitionItem\n            className='text-center'\n            term={t('parts:speed')}\n          >\n            {stat.speed}\n          </DefinitionItem>\n        </div>\n        <div className='flex w-1/3 justify-center pl-2'>\n          <DefinitionItem\n            className='text-center'\n            term={t('parts:cornering')}\n          >\n            {stat.cornering}\n          </DefinitionItem>\n        </div>\n        <div className='flex w-1/3 justify-center pl-2'>\n          <DefinitionItem\n            className='text-center'\n            term={t('parts:powerUnit')}\n          >\n            {stat.powerUnit}\n          </DefinitionItem>\n        </div>\n      </div>\n\n      <Hr />\n\n      <div className='flex flex-row gap-2 divide-x justify-between divide-gray-200 dark:divide-gray-700'>\n        <div className='flex w-1/2 justify-center'>\n          <DefinitionItem\n            className='text-center'\n            term={t('parts:reliability')}\n          >\n            {stat.reliability}\n          </DefinitionItem>\n        </div>\n        <div className='flex w-1/2 justify-center pl-2'>\n          <DefinitionItem\n            className='text-center'\n            term={t('parts:pitStopTime')}\n          >\n            {stat.pitStopTime.toFixed(2)}\n          </DefinitionItem>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PartStats;\n","import type { ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode | ReactNode[];\n}\n\nconst BestPartsGrid = (props: Props) => {\n  const { children } = props;\n\n  return (\n    <div className='grid justify-items-center max-sm:grid-cols-1 max-lg:grid-cols-2 max-2xl:grid-cols-3 grid-cols-4 gap-5'>\n      {children}\n    </div>\n  );\n};\n\nexport default BestPartsGrid;\n","import { AssetBoostBadge } from '@/components/Asset';\nimport { Card } from '@/components/ui';\nimport { ExportSquare } from 'iconsax-react';\nimport { twMerge } from 'tailwind-merge';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport IconsaxIcon from '@/lib/IconsaxIcon';\nimport RarityBadge from '@/components/RarityBadge';\nimport type { Asset } from '@/types';\nimport type { ReactNode } from 'react';\n\ninterface Props {\n  asset: Asset;\n  children?: ReactNode | ReactNode[];\n}\n\nconst BestAssetCard = (props: Props) => {\n  const { asset, children } = props;\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  // TODO: Create store to save boosted assets and respective boost value\n  // FIXME:\n  const boost = 10;\n  // const hasBoost = asset.series === 1;\n  const hasBoost = false;\n\n  const isStock = asset.rarity === 'stock';\n\n  /**\n   * Methods\n   */\n  const handleClickCard = () => {\n    if (!isStock) {\n      navigate(asset.id.toString());\n    }\n  };\n\n  /**\n   * Render\n   */\n  return (\n    <Card\n      className={hasBoost ? 'border-amber-500 dark:border-amber-500 border-2' : ''}\n      key={asset.id}\n    >\n      <div className='p-3'>\n        <div className='flex flex-row justify-between items-center mb-2 gap-2 flex-wrap'>\n          <button\n            className={twMerge(\n              'flex flex-row items-center gap-2 text-gray-900 dark:text-white',\n              isStock ? 'cursor-not-allowed' : 'hover:underline hover:text-blue-600 hover:dark:text-blue-500',\n            )}\n            onClick={handleClickCard}\n          >\n            <h5 className='text-2xl font-bold tracking-tight'>{asset.name} </h5>\n            {!isStock && (\n              <IconsaxIcon\n                Icon={ExportSquare}\n                size={20}\n              />\n            )}\n          </button>\n\n          {hasBoost && <AssetBoostBadge boost={boost} />}\n        </div>\n\n        <div className='flex flex-row justify-between items-center mb-3'>\n          <p className='font-normal text-gray-700 dark:text-gray-400'>{t('series', { series: asset.series })}</p>\n\n          <RarityBadge rarity={asset.rarity} />\n        </div>\n\n        {children}\n      </div>\n    </Card>\n  );\n};\n\nexport default BestAssetCard;\n","import { BestAssetCard } from '@/components/Asset';\nimport { Heading6, Hr } from '@/components/ui';\nimport { PartStats } from '@/features/parts';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport BestPartsGrid from './BestPartsGrid';\nimport type { BestParts as BestPartsType } from '../../types';\n\ninterface Props {\n  bestParts: BestPartsType;\n}\n\nconst BestParts = (props: Props) => {\n  const {\n    bestParts: { bestBrake, bestEngine, bestFrontWing, bestGearbox, bestRearWing, bestSuspension },\n  } = props;\n  const { t } = useTranslation(['parts']);\n\n  const parts = useMemo(\n    () => [\n      {\n        data: bestBrake,\n        label: t('parts:brake', { count: 1 }),\n      },\n      {\n        data: bestGearbox,\n        label: t('parts:gearbox', { count: 1 }),\n      },\n      {\n        data: bestRearWing,\n        label: t('parts:rearWing', { count: 1 }),\n      },\n      {\n        data: bestFrontWing,\n        label: t('parts:frontWing', { count: 1 }),\n      },\n      {\n        data: bestSuspension,\n        label: t('parts:suspension', { count: 1 }),\n      },\n      {\n        data: bestEngine,\n        label: t('parts:engine', { count: 1 }),\n      },\n    ],\n    [bestBrake, bestEngine, bestFrontWing, bestGearbox, bestRearWing, bestSuspension, t],\n  );\n\n  return (\n    <BestPartsGrid>\n      {parts.map((part, i) => (\n        <div\n          className='w-full'\n          key={i}\n        >\n          <Heading6 className='mb-1'>{part.label}</Heading6>\n\n          <BestAssetCard asset={part.data.asset}>\n            <Hr />\n\n            <PartStats stat={part.data.stat} />\n          </BestAssetCard>\n        </div>\n      ))}\n    </BestPartsGrid>\n  );\n};\n\nexport default BestParts;\n","import { Alert, Heading6, Hr } from '@/components/ui';\nimport { BestAssetCard } from '@/components/Asset';\nimport { DriverStats } from '@/features/drivers';\nimport { useTranslation } from 'react-i18next';\nimport type { BestDrivers as BestDriversType } from '../../types';\n\ninterface Props {\n  bestDrivers: BestDriversType;\n}\n\nconst BestDrivers = (props: Props) => {\n  const { bestDrivers } = props;\n\n  const { t } = useTranslation(['calculators']);\n\n  if (!bestDrivers.hasTwoDrivers) {\n    return <Alert severity='warning'>{t('calculators:error.twoDriverRequired')}</Alert>;\n  }\n\n  return (\n    <div className='grid justify-items-center max-sm:grid-cols-1 grid-cols-2 gap-5 mb-5'>\n      <div className='max-w-sm w-full'>\n        <Heading6 className='mb-1'>{t('calculators:driver1')}</Heading6>\n\n        <BestAssetCard asset={bestDrivers.driver1.asset}>\n          <Hr />\n\n          <DriverStats stat={bestDrivers.driver1.stat} />\n        </BestAssetCard>\n      </div>\n\n      <div className='max-w-sm w-full'>\n        <Heading6 className='mb-1'>{t('calculators:driver2')}</Heading6>\n\n        <BestAssetCard asset={bestDrivers.driver2.asset}>\n          <Hr />\n\n          <DriverStats stat={bestDrivers.driver2.stat} />\n        </BestAssetCard>\n      </div>\n    </div>\n  );\n};\n\nexport default BestDrivers;\n","import { Card } from '@/components/ui';\nimport DefinitionItem from '@/components/DefinitionItem';\nimport type { ReactNode } from 'react';\n\ninterface Props {\n  children: string | number | ReactNode;\n  title: string;\n}\n\nconst TeamStatCard = (props: Props) => {\n  const { children, title } = props;\n\n  return (\n    <Card className='max-w-[250px] w-full'>\n      <div className='p-3'>\n        <DefinitionItem\n          className='text-center'\n          term={title}\n        >\n          {children}\n        </DefinitionItem>\n      </div>\n    </Card>\n  );\n};\n\nexport default TeamStatCard;\n","import { useTranslation } from 'react-i18next';\nimport TeamStatCard from './TeamStatCard';\n\ninterface Props {\n  score: string | number;\n}\n\nconst TeamScore = (props: Props) => {\n  const { score } = props;\n\n  const { t } = useTranslation(['calculators']);\n\n  return <TeamStatCard title={t('calculators:teamScore')}>{score} ± 1</TeamStatCard>;\n};\n\nexport default TeamScore;\n","import { useTranslation } from 'react-i18next';\nimport TeamStatCard from './TeamStatCard';\nimport type { BestParts as BestPartsType } from '../../types';\n\ninterface Props {\n  bestParts: BestPartsType;\n}\n\nconst TeamPartsStats = (props: Props) => {\n  const {\n    bestParts: {\n      sum: { cornering, pitStopTime, powerUnit, reliability, speed },\n    },\n  } = props;\n\n  const { t } = useTranslation(['parts']);\n\n  return (\n    <div className='mb-3'>\n      <div className='max-md:hidden flex flex-row gap-2 justify-between w-full'>\n        <TeamStatCard title={t('parts:speed')}>{speed}</TeamStatCard>\n        <TeamStatCard title={t('parts:powerUnit')}>{powerUnit}</TeamStatCard>\n        <TeamStatCard title={t('parts:cornering')}>{cornering}</TeamStatCard>\n        <TeamStatCard title={t('parts:reliability')}>{reliability}</TeamStatCard>\n        <TeamStatCard title={t('parts:pitStopTime')}>{pitStopTime.toFixed(2)}</TeamStatCard>\n      </div>\n\n      <div className='md:hidden flex flex-col gap-2 items-center w-full'>\n        <div className='flex flex-row justify-evenly gap-2 w-full'>\n          <TeamStatCard title={t('parts:speed')}>{speed}</TeamStatCard>\n          <TeamStatCard title={t('parts:powerUnit')}>{powerUnit}</TeamStatCard>\n          <TeamStatCard title={t('parts:cornering')}>{cornering}</TeamStatCard>\n        </div>\n        <div className='flex flex-row justify-evenly gap-2 w-full'>\n          <TeamStatCard title={t('parts:reliability')}>{reliability}</TeamStatCard>\n          <TeamStatCard title={t('parts:pitStopTime')}>{pitStopTime.toFixed(2)}</TeamStatCard>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TeamPartsStats;\n","import { useDrivers } from '@/features/drivers';\nimport useCollectedAssetsStore from '@/store/collectedAssetsStore';\nimport type { BestDriver, BestDrivers } from '../types';\n\nconst useBestDrivers = (): BestDrivers => {\n  const drivers = useDrivers();\n  const collectedDrivers = useCollectedAssetsStore((data) => data.drivers);\n\n  const filteredDrivers = drivers.filter((driver) =>\n    Object.keys(collectedDrivers)\n      .map((key) => parseInt(key, 10))\n      .includes(driver.id),\n  );\n\n  if (filteredDrivers.length < 2) {\n    return { driver1: undefined, driver2: undefined, hasTwoDrivers: false };\n  }\n\n  const driversWithCurrentLevelScore: BestDriver[] = filteredDrivers.map((driver) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const statFound = driver.stats.find((stat) => stat.level === collectedDrivers[driver.id].level)!;\n\n    return {\n      asset: driver,\n      score: statFound.score.weighted,\n      stat: statFound,\n    };\n  });\n\n  const [driver1, driver2] = driversWithCurrentLevelScore.sort((bestDriverA, bestDriverB) =>\n    bestDriverA.score > bestDriverB.score ? -1 : 1,\n  );\n\n  return {\n    driver1,\n    driver2,\n    hasTwoDrivers: true,\n  };\n};\n\nexport default useBestDrivers;\n","import useCollectedAssetsStore from '@/store/collectedAssetsStore';\nimport type { BestPart } from '../types';\nimport type { Part, PartsCollectedKeys } from '@/features/parts';\n\nconst useBestPart = (partData: Part[], partKey: PartsCollectedKeys) => {\n  const collectedParts = useCollectedAssetsStore((data) => data[partKey]);\n\n  const filteredParts = partData.filter((part) =>\n    Object.keys(collectedParts)\n      .map((key) => parseInt(key, 10))\n      .includes(part.id),\n  );\n\n  const partsWithCurrentLevelScore: BestPart[] = filteredParts.map((part) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const statFound = part.stats.find((stat) => stat.level === collectedParts[part.id].level)!;\n\n    return {\n      asset: part,\n      score: statFound.score.weighted,\n      stat: statFound,\n    };\n  });\n\n  const [bestPart] = partsWithCurrentLevelScore.sort((partA, partB) => (partA.score > partB.score ? -1 : 1));\n\n  return bestPart;\n};\n\nexport default useBestPart;\n","import type { BestPart, BestPartsSum } from '../types';\n\ninterface Props {\n  bestBrake: BestPart;\n  bestEngine: BestPart;\n  bestFrontWing: BestPart;\n  bestGearbox: BestPart;\n  bestRearWing: BestPart;\n  bestSuspension: BestPart;\n}\n\nconst useBestPartsStatsSum = (props: Props): BestPartsSum => {\n  const { bestBrake, bestEngine, bestFrontWing, bestGearbox, bestRearWing, bestSuspension } = props;\n\n  return {\n    cornering:\n      bestBrake.stat.cornering +\n      bestEngine.stat.cornering +\n      bestFrontWing.stat.cornering +\n      bestGearbox.stat.cornering +\n      bestRearWing.stat.cornering +\n      bestSuspension.stat.cornering,\n    pitStopTime:\n      bestBrake.stat.pitStopTime +\n      bestEngine.stat.pitStopTime +\n      bestFrontWing.stat.pitStopTime +\n      bestGearbox.stat.pitStopTime +\n      bestRearWing.stat.pitStopTime +\n      bestSuspension.stat.pitStopTime,\n    powerUnit:\n      bestBrake.stat.powerUnit +\n      bestEngine.stat.powerUnit +\n      bestFrontWing.stat.powerUnit +\n      bestGearbox.stat.powerUnit +\n      bestRearWing.stat.powerUnit +\n      bestSuspension.stat.powerUnit,\n    reliability:\n      bestBrake.stat.reliability +\n      bestEngine.stat.reliability +\n      bestFrontWing.stat.reliability +\n      bestGearbox.stat.reliability +\n      bestRearWing.stat.reliability +\n      bestSuspension.stat.reliability,\n    speed:\n      bestBrake.stat.speed +\n      bestEngine.stat.speed +\n      bestFrontWing.stat.speed +\n      bestGearbox.stat.speed +\n      bestRearWing.stat.speed +\n      bestSuspension.stat.speed,\n  };\n};\n\nexport default useBestPartsStatsSum;\n","import { useBrakes, useEngines, useFrontWings, useGearboxes, useRearWings, useSuspensions } from '@/features/parts';\nimport useBestPart from './useBestPart';\nimport useBestPartsStatsSum from './useBestPartsStatsSum';\nimport type { BestParts } from '../types';\n\nconst useBestParts = (): BestParts => {\n  const brakes = useBrakes();\n  const bestBrake = useBestPart(brakes, 'brakes');\n\n  const engines = useEngines();\n  const bestEngine = useBestPart(engines, 'engines');\n\n  const frontWings = useFrontWings();\n  const bestFrontWing = useBestPart(frontWings, 'frontWings');\n\n  const gearboxes = useGearboxes();\n  const bestGearbox = useBestPart(gearboxes, 'gearboxes');\n\n  const rearWings = useRearWings();\n  const bestRearWing = useBestPart(rearWings, 'rearWings');\n\n  const suspensions = useSuspensions();\n  const bestSuspension = useBestPart(suspensions, 'suspensions');\n\n  const sum = useBestPartsStatsSum({\n    bestBrake,\n    bestEngine,\n    bestFrontWing,\n    bestGearbox,\n    bestRearWing,\n    bestSuspension,\n  });\n\n  return { bestBrake, bestEngine, bestFrontWing, bestGearbox, bestRearWing, bestSuspension, sum };\n};\n\nexport default useBestParts;\n","import type { BestDrivers, BestParts } from '../types';\nimport type { PartStat } from '@/features/parts';\n\nconst useTeamScore = (driver: BestDrivers, parts: BestParts) => {\n  const { driver1, driver2, hasTwoDrivers } = driver;\n  const { bestBrake, bestEngine, bestFrontWing, bestGearbox, bestRearWing, bestSuspension } = parts;\n\n  const calculateStatSumWithoutPitStopTime = (stat: PartStat) =>\n    stat.cornering + stat.powerUnit + stat.reliability + stat.reliability;\n\n  const pitStopTimeSum =\n    bestBrake.stat.pitStopTime +\n    bestEngine.stat.pitStopTime +\n    bestFrontWing.stat.pitStopTime +\n    bestGearbox.stat.pitStopTime +\n    bestRearWing.stat.pitStopTime +\n    bestSuspension.stat.pitStopTime;\n\n  let teamScore =\n    calculateStatSumWithoutPitStopTime(bestBrake.stat) +\n    calculateStatSumWithoutPitStopTime(bestEngine.stat) +\n    calculateStatSumWithoutPitStopTime(bestFrontWing.stat) +\n    calculateStatSumWithoutPitStopTime(bestGearbox.stat) +\n    calculateStatSumWithoutPitStopTime(bestRearWing.stat) +\n    calculateStatSumWithoutPitStopTime(bestSuspension.stat);\n\n  // FIXME: Find the right values for the linear functions (those work well but not perfectly)\n  // eslint-disable-next-line id-length\n  const a = -45.9;\n  // eslint-disable-next-line id-length\n  const b = 281;\n\n  // f(x) = a*x + b\n  const pitStopTimeValue = a * pitStopTimeSum + b;\n\n  teamScore += pitStopTimeValue;\n\n  if (hasTwoDrivers) {\n    teamScore += driver1.stat.statsSum;\n    teamScore += driver2.stat.statsSum;\n  }\n\n  return teamScore.toFixed(0);\n};\n\nexport default useTeamScore;\n","import { BestDrivers, BestParts } from '../BestAssets';\nimport { Container, Heading3 } from '@/components/ui';\nimport { TeamPartsStats, TeamScore } from '../TeamStats';\nimport { useTranslation } from 'react-i18next';\nimport useBestDrivers from '../../hooks/useBestDrivers';\nimport useBestParts from '../../hooks/useBestParts';\nimport useTeamScore from '../../hooks/useTeamScore';\n\nconst BestTeam = () => {\n  const { t } = useTranslation(['calculators']);\n\n  const bestDrivers = useBestDrivers();\n  const bestParts = useBestParts();\n\n  const score = useTeamScore(bestDrivers, bestParts);\n\n  return (\n    <Container maxWidth='2xl'>\n      <Heading3>{t('calculators:bestTeam')}</Heading3>\n\n      <div className='flex flex-row justify-center w-full mb-5'>\n        <TeamScore score={score} />\n      </div>\n\n      <BestDrivers bestDrivers={bestDrivers} />\n\n      <TeamPartsStats bestParts={bestParts} />\n\n      <BestParts bestParts={bestParts} />\n    </Container>\n  );\n};\n\nexport default BestTeam;\n","import { useDrivers } from '@/features/drivers';\nimport assetUpgradeRequirements from '@/utils/assetUpgradeRequirements';\nimport useCollectedAssetsStore from '@/store/collectedAssetsStore';\nimport type { BestDrivers, BestPartOnceUpgradedRequirements } from '../types';\n\ntype BestDriversOnceUpgradedReturn = BestDrivers & BestPartOnceUpgradedRequirements;\n\nconst useBestDriversOnceUpgraded = (): BestDriversOnceUpgradedReturn => {\n  const drivers = useDrivers();\n  const collectedDrivers = useCollectedAssetsStore((data) => data.drivers);\n\n  const filteredDrivers = drivers.filter((driver) =>\n    Object.keys(collectedDrivers)\n      .map((key) => parseInt(key, 10))\n      .includes(driver.id),\n  );\n\n  if (filteredDrivers.length < 2) {\n    return { driver1: undefined, driver2: undefined, hasTwoDrivers: false };\n  }\n\n  const driversDataForMaxLevelAvailable = filteredDrivers.map((driver) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const collectedDriverData = collectedDrivers[driver.id]!;\n\n    const driverUpgradeRequirements = assetUpgradeRequirements(\n      driver.stats,\n      collectedDriverData.level,\n      collectedDriverData.cards,\n    );\n\n    return {\n      driver,\n      driverUpgradeRequirements,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      maxStat: driver.stats.find((stat) => driverUpgradeRequirements.maxLevelAvailable === stat.level)!,\n    };\n  });\n\n  const [driver1, driver2] = driversDataForMaxLevelAvailable.sort((bestDriverA, bestDriverB) =>\n    bestDriverA.maxStat.score.weighted > bestDriverB.maxStat.score.weighted ? -1 : 1,\n  );\n\n  return {\n    driver1: {\n      asset: driver1.driver,\n      score: driver1.maxStat.score.weighted,\n      stat: driver1.maxStat,\n    },\n    driver2: {\n      asset: driver2.driver,\n      score: driver2.maxStat.score.weighted,\n      stat: driver2.maxStat,\n    },\n    hasTwoDrivers: true,\n    upgradeRequirements: {\n      coinsNeeded: driver1.driverUpgradeRequirements.coinsNeeded + driver2.driverUpgradeRequirements.coinsNeeded,\n    },\n  };\n};\n\nexport default useBestDriversOnceUpgraded;\n","import assetUpgradeRequirements from '@/utils/assetUpgradeRequirements';\nimport useCollectedAssetsStore from '@/store/collectedAssetsStore';\nimport type { BestPart, BestPartOnceUpgradedRequirements } from '../types';\nimport type { Part, PartsCollectedKeys } from '@/features/parts';\n\ntype BestPartsOnceReturn = BestPart & BestPartOnceUpgradedRequirements;\n\nconst useBestPartOnceUpgraded = (partData: Part[], partKey: PartsCollectedKeys): BestPartsOnceReturn => {\n  const collectedParts = useCollectedAssetsStore((data) => data[partKey]);\n\n  const filteredParts = partData.filter((part) =>\n    Object.keys(collectedParts)\n      .map((key) => parseInt(key, 10))\n      .includes(part.id),\n  );\n\n  const partsDataForMaxLevelAvailable = filteredParts.map((part) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const collectedPartData = collectedParts[part.id]!;\n\n    const partUpgradeRequirements = assetUpgradeRequirements(\n      part.stats,\n      collectedPartData.level,\n      collectedPartData.cards,\n    );\n\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      maxStat: part.stats.find((stat) => partUpgradeRequirements.maxLevelAvailable === stat.level)!,\n      part,\n      partUpgradeRequirements,\n    };\n  });\n\n  const [bestPart] = partsDataForMaxLevelAvailable.sort((partA, partB) =>\n    partA.maxStat.score.weighted > partB.maxStat.score.weighted ? -1 : 1,\n  );\n\n  return {\n    asset: bestPart.part,\n    score: bestPart.maxStat.score.weighted,\n    stat: bestPart.maxStat,\n    upgradeRequirements: bestPart.partUpgradeRequirements,\n  };\n};\n\nexport default useBestPartOnceUpgraded;\n","import { useBrakes, useEngines, useFrontWings, useGearboxes, useRearWings, useSuspensions } from '@/features/parts';\nimport useBestPartOnceUpgraded from './useBestPartOnceUpgraded';\nimport useBestPartsStatsSum from './useBestPartsStatsSum';\nimport type { BestPartOnceUpgradedRequirements, BestParts } from '../types';\n\ntype BestPartsOnceUpgradedReturn = BestParts & BestPartOnceUpgradedRequirements;\n\nconst useBestPartsOnceUpgraded = (): BestPartsOnceUpgradedReturn => {\n  const brakes = useBrakes();\n  const bestBrake = useBestPartOnceUpgraded(brakes, 'brakes');\n\n  const engines = useEngines();\n  const bestEngine = useBestPartOnceUpgraded(engines, 'engines');\n\n  const frontWings = useFrontWings();\n  const bestFrontWing = useBestPartOnceUpgraded(frontWings, 'frontWings');\n\n  const gearboxes = useGearboxes();\n  const bestGearbox = useBestPartOnceUpgraded(gearboxes, 'gearboxes');\n\n  const rearWings = useRearWings();\n  const bestRearWing = useBestPartOnceUpgraded(rearWings, 'rearWings');\n\n  const suspensions = useSuspensions();\n  const bestSuspension = useBestPartOnceUpgraded(suspensions, 'suspensions');\n\n  const sum = useBestPartsStatsSum({\n    bestBrake,\n    bestEngine,\n    bestFrontWing,\n    bestGearbox,\n    bestRearWing,\n    bestSuspension,\n  });\n\n  const coinsNeeded =\n    (bestBrake.upgradeRequirements?.coinsNeeded ?? 0) +\n    (bestEngine.upgradeRequirements?.coinsNeeded ?? 0) +\n    (bestFrontWing.upgradeRequirements?.coinsNeeded ?? 0) +\n    (bestGearbox.upgradeRequirements?.coinsNeeded ?? 0) +\n    (bestRearWing.upgradeRequirements?.coinsNeeded ?? 0) +\n    (bestSuspension.upgradeRequirements?.coinsNeeded ?? 0);\n\n  return {\n    bestBrake,\n    bestEngine,\n    bestFrontWing,\n    bestGearbox,\n    bestRearWing,\n    bestSuspension,\n    sum,\n    upgradeRequirements: {\n      coinsNeeded,\n    },\n  };\n};\n\nexport default useBestPartsOnceUpgraded;\n","import { BestDrivers, BestParts } from '../BestAssets';\nimport { Heading3 } from '@/components/ui';\nimport { TeamPartsStats, TeamScore } from '../TeamStats';\nimport { formatLongNumber } from '@/utils/formatting';\nimport { useTranslation } from 'react-i18next';\nimport TeamStatCard from '../TeamStats/TeamStatCard';\nimport useBestDriversOnceUpgraded from '../../hooks/useBestDriversOnceUpgraded';\nimport useBestPartsOnceUpgraded from '../../hooks/useBestPartsOnceUpgraded';\nimport useTeamScore from '../../hooks/useTeamScore';\n\nconst BestTeamOnceUpgraded = () => {\n  const { t } = useTranslation(['calculators']);\n\n  const bestDriversOnceUpgraded = useBestDriversOnceUpgraded();\n  const bestPartsOnceUpgraded = useBestPartsOnceUpgraded();\n\n  const score = useTeamScore(bestDriversOnceUpgraded, bestPartsOnceUpgraded);\n\n  const coinsNeeded =\n    (bestDriversOnceUpgraded.upgradeRequirements?.coinsNeeded ?? 0) +\n    (bestPartsOnceUpgraded.upgradeRequirements?.coinsNeeded ?? 0);\n\n  return (\n    <>\n      <Heading3>{t('calculators:bestTeamOnceUpgraded')}</Heading3>\n\n      <div className='flex flex-row justify-center w-full mb-5 gap-5'>\n        <TeamScore score={score} />\n        <TeamStatCard title={t('calculators:coinsNeeded')}>{formatLongNumber(coinsNeeded)}</TeamStatCard>\n      </div>\n\n      <BestDrivers bestDrivers={bestDriversOnceUpgraded} />\n\n      <TeamPartsStats bestParts={bestPartsOnceUpgraded} />\n\n      <BestParts bestParts={bestPartsOnceUpgraded} />\n    </>\n  );\n};\n\nexport default BestTeamOnceUpgraded;\n","import { BestTeam, BestTeamOnceUpgraded } from '../../components';\nimport { Container, Hr } from '@/components/ui';\n\nconst CalculatorPage = () => (\n  <Container maxWidth='2xl'>\n    <BestTeam />\n\n    <Hr className='my-10' />\n\n    <BestTeamOnceUpgraded />\n  </Container>\n);\n\nexport default CalculatorPage;\n"],"names":["Heading3","props","children","className","jsxRuntimeExports","twMerge","Heading6","DriverStats","stat","t","useTranslation","DefinitionItem","Hr","PartStats","BestPartsGrid","BestAssetCard","asset","navigate","useNavigate","hasBoost","isStock","handleClickCard","Card","IconsaxIcon","ExportSquare","RarityBadge","BestParts","bestBrake","bestEngine","bestFrontWing","bestGearbox","bestRearWing","bestSuspension","parts","reactExports","part","i","BestDrivers","bestDrivers","Alert","TeamStatCard","title","TeamScore","score","TeamPartsStats","cornering","pitStopTime","powerUnit","reliability","speed","useBestDrivers","drivers","useDrivers","collectedDrivers","useCollectedAssetsStore","data","filteredDrivers","driver","key","driversWithCurrentLevelScore","statFound","driver1","driver2","bestDriverA","bestDriverB","useBestPart","partData","partKey","collectedParts","partsWithCurrentLevelScore","bestPart","partA","partB","useBestPartsStatsSum","useBestParts","brakes","useBrakes","engines","useEngines","frontWings","useFrontWings","gearboxes","useGearboxes","rearWings","useRearWings","suspensions","useSuspensions","sum","useTeamScore","hasTwoDrivers","calculateStatSumWithoutPitStopTime","pitStopTimeSum","teamScore","a","b","pitStopTimeValue","BestTeam","bestParts","Container","useBestDriversOnceUpgraded","driversDataForMaxLevelAvailable","collectedDriverData","driverUpgradeRequirements","assetUpgradeRequirements","useBestPartOnceUpgraded","partsDataForMaxLevelAvailable","collectedPartData","partUpgradeRequirements","useBestPartsOnceUpgraded","coinsNeeded","_a","_b","_c","_d","_e","_f","BestTeamOnceUpgraded","bestDriversOnceUpgraded","bestPartsOnceUpgraded","formatLongNumber","CalculatorPage","CalculatorPage$1"],"mappings":"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"}