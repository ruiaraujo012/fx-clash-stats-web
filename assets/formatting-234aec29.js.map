{"version":3,"file":"formatting-234aec29.js","sources":["../../src/components/ui/Alert/Alert.tsx","../../src/components/ui/Card/Card.tsx","../../src/components/ui/Container/Container.tsx","../../src/components/ui/Hr/Hr.tsx","../../src/features/drivers/store/driversCollectedSlice.ts","../../src/components/DefinitionItem.tsx","../../src/features/parts/store/partsCollectedSlice.ts","../../src/components/RarityBadge.tsx","../../src/utils/assetUpgradeRequirements.ts","../../src/store/collectedAssetsStore.ts","../../src/utils/formatting.ts"],"sourcesContent":["import { type ReactNode } from 'react';\nimport { twMerge } from 'tailwind-merge';\n\ntype Severity = 'info' | 'danger' | 'success' | 'warning';\n\nconst twSeverity: { [severity in Severity]: string } = {\n  danger: 'text-red-800 bg-red-50 dark:bg-red-900 dark:text-red-400',\n  info: 'text-blue-800 bg-blue-50 dark:bg-blue-900 dark:text-blue-400',\n  success: 'text-green-800 bg-green-50 dark:bg-green-900 dark:text-green-400',\n  warning: 'text-yellow-800 bg-yellow-50 dark:bg-yellow-900 dark:text-yellow-400',\n};\n\ninterface Props {\n  className?: string;\n  severity?: Severity;\n  children: ReactNode | ReactNode[];\n}\n\nconst Alert = (props: Props) => {\n  const { children, className, severity = 'info' } = props;\n\n  return (\n    <div\n      className={twMerge('p-4 mb-4 text-sm rounded-lg', twSeverity[severity], className)}\n      role='alert'\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Alert;\n","import { twMerge } from 'tailwind-merge';\nimport type { DetailedHTMLProps, HTMLAttributes } from 'react';\n\ntype Props = DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n\nconst Card = (props: Props) => {\n  const { children, className, ...other } = props;\n\n  return (\n    <div\n      className={twMerge(\n        'bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 overflow-hidden',\n        className,\n      )}\n      {...other}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { type ReactNode } from 'react';\nimport { twMerge } from 'tailwind-merge';\n\ntype MaxWidth = 'full' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n\nconst twMaxWidth: { [maxWidth in MaxWidth]: string } = {\n  '2xl': 'max-w-screen-2xl',\n  full: 'max-w-none',\n  lg: 'max-w-screen-lg',\n  md: 'max-w-screen-md',\n  sm: 'max-w-screen-sm',\n  xl: 'max-w-screen-xl',\n};\n\ninterface Props {\n  maxWidth?: MaxWidth;\n  children: ReactNode | ReactNode[];\n}\n\nconst Container = (props: Props) => {\n  const { children, maxWidth = 'full' } = props;\n\n  return (\n    <div className='flex justify-center w-full'>\n      <div className={twMerge('w-full', twMaxWidth[maxWidth])}>{children}</div>\n    </div>\n  );\n};\n\nexport default Container;\n","import { twMerge } from 'tailwind-merge';\n\ninterface Props {\n  className?: string;\n}\n\nconst Hr = (props: Props) => {\n  const { className } = props;\n\n  return <hr className={twMerge('h-px my-2 bg-gray-200 border-0 dark:bg-gray-700', className)} />;\n};\n\nexport default Hr;\n","import type { AssetCollectedData } from '@/types';\nimport type { AssetsCollectedStore } from '@/store/collectedAssetsStore';\nimport type { StateCreator } from 'zustand';\n\ninterface DriversCollectedState {\n  drivers: AssetCollectedData;\n}\n\nexport type DriversCollectedKeys = keyof DriversCollectedState;\n\nexport type DriversCollectedDataSlice = DriversCollectedState;\n\nexport const createDriversCollectedSlice: StateCreator<\n  AssetsCollectedStore,\n  [['zustand/persist', unknown]],\n  [],\n  DriversCollectedDataSlice\n> = () => ({\n  drivers: {},\n});\n","import { twMerge } from 'tailwind-merge';\nimport type { ReactNode } from 'react';\n\ninterface Props {\n  term: string;\n  children: ReactNode | ReactNode[];\n  className?: string;\n}\n\nconst DefinitionItem = (props: Props) => {\n  const { children, term, className } = props;\n\n  return (\n    <dl className={twMerge('flex flex-col', className)}>\n      <div className='flex flex-col justify-center h-full'>\n        <dt className='text-sm font-normal text-gray-600 dark:text-gray-400'>{term}</dt>\n      </div>\n\n      <dd className='text-base font-bold text-gray-900 dark:text-white'>{children}</dd>\n    </dl>\n  );\n};\n\nexport default DefinitionItem;\n","import type { AssetCollectedData } from '@/types';\nimport type { AssetsCollectedStore } from '@/store/collectedAssetsStore';\nimport type { StateCreator } from 'zustand';\n\ninterface PartsCollectedState {\n  brakes: AssetCollectedData;\n  engines: AssetCollectedData;\n  frontWings: AssetCollectedData;\n  gearboxes: AssetCollectedData;\n  rearWings: AssetCollectedData;\n  suspensions: AssetCollectedData;\n}\n\nexport type PartsCollectedKeys = keyof PartsCollectedState;\n\nexport type PartsCollectedDataSlice = PartsCollectedState;\n\nexport const createPartsCollectedSlice: StateCreator<\n  AssetsCollectedStore,\n  [['zustand/persist', unknown]],\n  [],\n  PartsCollectedDataSlice\n> = () => ({\n  brakes: {\n    // Starter\n    0: {\n      cards: 0,\n      level: 1,\n    },\n  },\n  engines: {\n    // Starter\n    0: {\n      cards: 0,\n      level: 1,\n    },\n  },\n  frontWings: {\n    // Starter\n    0: {\n      cards: 0,\n      level: 1,\n    },\n  },\n  gearboxes: {\n    // Starter\n    0: {\n      cards: 0,\n      level: 1,\n    },\n  },\n  rearWings: {\n    // Starter\n    0: {\n      cards: 0,\n      level: 1,\n    },\n  },\n  suspensions: {\n    // Starter\n    0: {\n      cards: 0,\n      level: 1,\n    },\n  },\n});\n","import { twMerge } from 'tailwind-merge';\nimport { useTranslation } from 'react-i18next';\nimport type { Rarity } from '@/types';\n\nconst badgeColor: { [key in Rarity]: string } = {\n  common: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',\n  epic: 'bg-fuchsia-100 text-fuchsia-800 dark:bg-fuchsia-900 dark:text-fuchsia-300',\n  rare: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300',\n  stock: 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300',\n};\n\ninterface Props {\n  rarity: Rarity;\n}\n\nconst RarityBadge = (props: Props) => {\n  const { rarity } = props;\n\n  const { t } = useTranslation();\n\n  return (\n    <span className={twMerge('text-xs font-medium mr-2 px-2.5 py-0.5 rounded', badgeColor[rarity])}>{t(rarity)}</span>\n  );\n};\n\nexport default RarityBadge;\n","import type { BaseStat } from '@/types';\n\nexport interface AssetUpgradeRequirements {\n  cardsNeeded: number;\n  coinsNeeded: number;\n  maxLevelAvailable: number;\n  remainingCards: number;\n}\n\nconst assetUpgradeRequirements = (assetStats: BaseStat[], level: number, cards: number): AssetUpgradeRequirements => {\n  const upgradeRequirements = assetStats.filter((stat) => stat.level > level).map((stat) => stat.upgrade);\n\n  let remainingCards = cards;\n  let maxLevelAvailable = level;\n  let coinsNeeded = 0;\n  let cardsNeeded = 0;\n\n  upgradeRequirements.some((upgrade) => {\n    if (level === 0 && cards === 0) {\n      return true;\n    }\n\n    if (upgrade.cards > remainingCards) {\n      return true;\n    }\n\n    remainingCards -= upgrade.cards;\n    maxLevelAvailable++;\n    coinsNeeded += upgrade.coins;\n    cardsNeeded += upgrade.cards;\n\n    return false;\n  });\n\n  return { cardsNeeded, coinsNeeded, maxLevelAvailable, remainingCards };\n};\n\nexport default assetUpgradeRequirements;\n","import {\n  type DriversCollectedDataSlice,\n  type DriversCollectedKeys,\n  createDriversCollectedSlice,\n} from '@/features/drivers';\nimport { create } from 'zustand';\nimport { createPartsCollectedSlice } from '@/features/parts';\nimport { immer } from 'zustand/middleware/immer';\nimport { mountStoreDevtool } from 'simple-zustand-devtools';\nimport { persist } from 'zustand/middleware';\n\nimport type { PartsCollectedDataSlice, PartsCollectedKeys } from '@/features/parts';\n\nexport type CollectedAssetsKeys = PartsCollectedKeys | DriversCollectedKeys;\n\ntype AssetsCollectedState = PartsCollectedDataSlice & DriversCollectedDataSlice;\n\ntype AssetsCollectedActions = {\n  updateCollectedAssetLevel: (assetKey: CollectedAssetsKeys, id: number, level: number) => void;\n  updateCollectedAssetCards: (assetKey: CollectedAssetsKeys, id: number, cards: number) => void;\n  increaseCollectedAssetCards: (assetKey: CollectedAssetsKeys, id: number) => void;\n  decreaseCollectedAssetCards: (assetKey: CollectedAssetsKeys, id: number) => void;\n};\n\nexport type AssetsCollectedStore = AssetsCollectedState & AssetsCollectedActions;\n\nconst useCollectedAssetsStore = create<AssetsCollectedStore>()(\n  persist(\n    immer((...args) => ({\n      ...createPartsCollectedSlice(...args),\n      ...createDriversCollectedSlice(...args),\n      decreaseCollectedAssetCards: (assetKey, id) => {\n        const [set] = args;\n\n        return set((state) => {\n          const currentCollectedCards = state[assetKey][id]?.cards ?? 0;\n\n          if (currentCollectedCards > 0) state[assetKey][id].cards = currentCollectedCards - 1;\n\n          return state;\n        });\n      },\n      increaseCollectedAssetCards: (assetKey, id) => {\n        const [set] = args;\n\n        return set((state) => {\n          const currentCollectedCards = state[assetKey][id]?.cards ?? 0;\n          const currentLevel = state[assetKey][id]?.level ?? 0;\n\n          state[assetKey][id] = {\n            ...state[assetKey][id],\n            cards: currentCollectedCards + 1,\n            level: currentLevel === 0 ? 1 : currentLevel,\n          };\n\n          return state;\n        });\n      },\n      updateCollectedAssetCards: (assetKey, id, cards) => {\n        const [set] = args;\n\n        return set((state) => {\n          const currentLevel = state[assetKey][id]?.level ?? 0;\n\n          state[assetKey][id] = {\n            ...state[assetKey][id],\n            cards,\n            level: currentLevel === 0 && cards > 0 ? 1 : currentLevel,\n          };\n\n          return state;\n        });\n      },\n      updateCollectedAssetLevel: (assetKey, id, level) => {\n        const [set] = args;\n\n        return set((state) => {\n          const currentCards = state[assetKey][id]?.cards ?? 0;\n\n          if (level === 0) {\n            delete state[assetKey][id];\n          } else {\n            state[assetKey][id] = {\n              ...state[assetKey][id],\n              cards: currentCards,\n              level,\n            };\n          }\n\n          return state;\n        });\n      },\n    })),\n    {\n      name: 'fxcs-assets-collected-store-storage',\n    },\n  ),\n);\n\nif (import.meta.env.DEV) {\n  mountStoreDevtool('[FXCS] Assets Collected Store', useCollectedAssetsStore);\n}\n\nexport default useCollectedAssetsStore;\n","import i18next from 'i18next';\n\n/**\n * formatLongNumbers\n * @param value value to be parsed into long number format\n * @returns the parsed long value\n */\nexport const formatLongNumber = (value: number): string => {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  const currentLanguage = i18next.language;\n  const formatter = new Intl.NumberFormat(currentLanguage);\n\n  return formatter.format(value);\n};\n"],"names":["twSeverity","Alert","props","children","className","severity","jsxRuntimeExports","twMerge","Card","other","twMaxWidth","Container","maxWidth","Hr","createDriversCollectedSlice","DefinitionItem","term","createPartsCollectedSlice","badgeColor","RarityBadge","rarity","t","useTranslation","assetUpgradeRequirements","assetStats","level","cards","upgradeRequirements","stat","remainingCards","maxLevelAvailable","coinsNeeded","cardsNeeded","upgrade","useCollectedAssetsStore","create","persist","immer","args","assetKey","id","set","state","currentCollectedCards","_a","currentLevel","_b","currentCards","formatLongNumber","value","currentLanguage","instance"],"mappings":"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"}